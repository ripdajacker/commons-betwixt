<?xml version="1.0"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<document>
  <properties>
    <title>TODO</title>
    <author email="jstrachan@apache.org">James Strachan</author>
  </properties>

  <body>
    <section name="TODO list">
      <p>
        The following is a list of items that need to be completed in
        Betwixt.  Contributions are welcome! 
      </p>
    
    <subsection name="High priority"> 
      <ul>
        <li>
<strong>Logging:</strong> create logging policy then review all code for compliance.
        </li>
        <li>
<strong>FAQ:</strong> convert FAQ to maven plugin.
        </li>
        <li>
<strong>Tasks:</strong> review.
        </li>
        <li>
Change ElementRule so that updaters are automatically guessed (when not present).
Add read-only attribute for properties to disable this behaviour.        
        </li>
        <li>
          BeanWriter is writing too sloppy (empty elements, etc). Fixing it in a clean way
          is almost impossible. 
          Probably a refactor is best anyway to have a less "sloppy" api.. 
        </li>
        <li>
          Get an overview of what .betwixt files should really do. 
          Especially more complicated examples will cause very strange and unexpected results.
        </li>
        <li>
            If an addFoo() method is found with no matching getFoos() then a warning should be generated.
	</li>
        <li>
		  Consider allowing the parsing of XML to order the properties/elements in the XMLBeanInfo
		  so that when the XML is output again it follows the same XML ordering again.
		  There is an example describing this 
		  <a href="http://mail-archives.apache.org/eyebrowse/ReadMsg?listName=dev@commons.apache.org&amp;msgNo=8488">here</a>.
		  For example we could add a feature to parse the DTD and order the XMLBeanInfo according to the order in the DTD.		  
	</li>
        <li>
		  Improved documentation! Improve package level documentation so that new developers can get up 
          to speed more quickly. Ensure all betwixt features have good user documentation. 
          More good code examples.
        </li>
        <li>
            Add support for IDREF's to BeanReader. At the moment, round tripping break when cycles exist.
        </li>
        <li>
           Add testcase for the BeanReader(SAXParser) and BeanReader(XMLReader). They should behave
           the same in all cases.
        </li>
        <li>
            <strong>Create test cases based on real xml examples.</strong>
            This should help to shake out any problems and help to find out how the design can be improved.
            These should also be used as a basis for improved documentation.
        </li>
        <li>
            <strong>Improve internal design.</strong>
            Betwixt is hard to understand and hard to create patches for.
            An improved internal design would help more people to contribute.
        </li>
        <li>
            <strong>Improve test coverage.</strong>
            Run test coverage tool and improve coverage of key functionality.
        </li>
        <li>
            <strong>Add dynabeans support.</strong> 
            Dynabeans are a feature of <code>commons-beanutils</code> that allows data in non-beans to be
            wrapped into pseudo-beans. If betwixt supported dynabeans then you could do cool stuff like 
            SQL -&gt; DynaBeans -&gt; XML. Probably a good way to do this would be to ensure that all property
            introspection is done by dyanbeans-aware methods of beanutils.
        </li>
        <li>
            <strong>Update RSS example application.</strong>
            The original betwixt documentation made use of a good example application based on RSS.
            Unfortunately, this no longer works since the build was updated to maven.
            The instructions and means of running are linked to the CVS version.
            New instructions - and probably movement of some of the code - is needed to support
            a release distribution. The example also needs some more work - better java docs and also
            more features.
        </li>
        <li>
            <strong>Review AbstractBeanWriter and SAXBeanWriter</strong>
            AbstractBeanWriter and SAXBeanWriter were written very quickly (to support functionality
            in maven). They need to be reviewed and properly documentated.
        </li>
       </ul>
    </subsection>
    
    <subsection name="Medium priority"> 
      <ul>
            <li>
                <strong>Add support for constructors with arguments.</strong>
                Currently, only beans with no-argument constructors can be read.
            </li>
            <li>
                <strong>Create design documentation</strong>
                This will help people understand the betwixt design.
            </li>
            <li>
                <strong>Add verification for all xml writing tests.</strong>
                At the moment, most of the xml writing tests do not test the output fully.
                Need to add comparisons against reference xml documents.
            </li>
            <li>
                <strong>Improve mapping for swing components</strong>
                Swing classes have lots and lots of properties. 
                Java 1.4 does a better job of persistance than betwixt for class that have lots of properties.
            </li>
            <li>
                <strong>Binary Data Elements</strong>
                Some properties should not be treated as beans and therefore mapped to a element graph.
                These should be converted to body text of binary data.
                A mechanism similar to BeanUtils.ConvertUtils might work.
                For example, if you have a colormodel that get's written (an array with a lot of 
                numbers and an xml-element per array element) betwixt will spend ages converting
                it bit by bit.
            </li>
            <li>
                <strong>Customizable ID/IDREF Mapping</strong>
                Add per element customization for ID/IDREF mappings.
                Extra attributes will be added to .betwixt file that specify the ID/IDREF names.
            </li>
            <li>
                <strong>Attribute-Or-Element Strategy</strong>
                At the moment, betwixt allows only an all-or-nothing for the choice between mapping to an
                attribute or an element. This should be replaced by a strategy interface which allows the
                mapping to the customized.
            </li>
      </ul>
    </subsection>
    
    <subsection name="Low priority"> 
      <ul>
            <li>
<strong>Improved Support For Interfaces (strategy)</strong>
Create a strategy which allow general implementation rules to be specified.
            </li>
        <li>
		  Create a W3C DOM implementation that acts as a facade on top of beans to allow beans to 
		  be transformed in XSLT engines as XML.
		</li>
        <li>
		  Add support for custom class loaders. Probably this means adding a classloader property
                  to <code>XMLIntrospector</code> and then ensuring all class creation uses that. 
                  The digestion rules which create the <code>XMLBeanInfo</code> from <code>.betwixt</code>
                  files should use the <code>XMLBeanInfoDigester</code> classloader property which should
                  be set by the <code>XMLIntrospector</code>.
		</li>
        <li>
            Create utility methods in BeanWriter to write stuff like prologs and doctype definitions to the 
            stream.
        </li>
        <li>
            Create a funky image for the betwixt home page.
        </li>
        <li>
            <strong>Element ordering strategies</strong>
            The ordering of the elements for a bean which doesn't have a .betwixt file associated
            is fixed by the order of the properties in the BeanInfo. If the class doesn't have a
            custom BeanInfo class then this order is arbitrary. This is unfortunate since often xml
            elements need a definite and predicatable ordering. Pluggable element ordering strategies
            would order the elements according to some algorithm eg. alphabetic.
        </li>
        <li>
            <strong>Support Mixed Content Round Tripping</strong>
            This is actually has some conceptual problems. What happens when you have two text
            descriptors mapped to properties next to each other?
            This would probably require some enhancements to Digester.
        </li>
       </ul>
    </subsection>
</section>
<section name='Completed'>
    <subsection name='Since 0.8'>
        <ul>
        	<li>
Added <code>useContextClassLoader</code> property to <code>IntrospectionConfiguration</code>.
When this is set to <code>true</code>, the introspector will use the context classloader
when loading classes. It is recommended that containers (such as JBoss) with well behaved
context classloaders set this property to true. 
See <a href='https://issues.apache.org/jira/browse/BETWIXT-57'>BETWIXT-57</a>.
       	    </li>
        </ul>
    </subsection>
    <subsection name='0.8'>            
        <ul>
          <li>
Added strategies for suppression of attributes and elements at introspection time.
          </li>
          <li>
Improved support for natural polymorphic mappings of collection subclasses.
          </li>
          <li>
Added support for option inheritance between parent and target mappings. Issue #37542.
          </li>
        	<li>
Added <code>getInheritedOption</code> method to <code>Context</code> to assist
with inheritance amongst options.
        	</li>
            <li>
Added convenience constructor to DefaultIdStoringStrategy.
This makes life easier for users that want to use object identity
(rather than equality) when generating IDs.
            </li>
            <li>
Fixed TextRule content bug. (Issue #36930).
            </li>
            <li>
Fixed attribute ID name recognition bug. (Issue #36929). 
            </li>
            <li>
Added support for text and options into multi-mappings.
            </li>
            <li>
Improved support for subclasses of Java collective types
by factoring collective type recognition into strategy.
            </li>
            <li>
Added support for multiple contained polymorphic mappings.
            </li>
            <li>
Added transcription strategy to allow flexbility for schema type names.
            </li>
            <li>
Added package name property suppression strategy and make default property suppression strategy public
nest so that it can be subclassed.
            </li>
            <li>
Fixed bug when introspecting in secure environments.
            </li>
            <li>
Fixed formatting bug when pretty printing elements with <code>endTagForEmptyElement</code> is true.
            </li>
            <li>
Made intitial indent level used for pretty printing configurable.
            </li>
          <li>Added guess-name attribute to addDefaults element in dot betwixt file.
          This allows mixed collections to be used with add-adders and addDefaults.</li>  
        </ul>
        <ul>
            <li>Fixed map custom updater in dot betwixt file bug.</li>  
        </ul>
        <ul>
        		<li>EOL in pretty printed xml now defaults to platform line separator.</li>
        </ul>
        <ul>
        		<li>Added <code>ValueSuppressionStrategy.suppressElement</code>  to allow elements to be suppressed
        		on the basis of the value of the property. Useful for Hibernate users.</li>
        </ul>
        <ul>
            <li>Added <code>forceAccessible</code> to <code>element</code> tag in dot betwixt file.
            This allows updater methods to be found that are not public.
            </li>
        </ul>
    </subsection>
    <subsection name='0.7'>
        <ul>
            <li>Fixed bug in nested element diagnosing empty elements.
            </li>
            <li>Added support for <strong>polymorphic mappings</strong>. 
            This allows the type of a property to be guessed at bind time
            (rather than at compile time).
            </li>
        	<li>Added <strong>options to context</strong>. This replaces direct flavour mechanism. 
        	(Flavour becomes just a specific option).</li>
        	<li>Factored out <strong>id storage</strong> into strategy</li>
            <li><strong>anonymous collections</strong> now allowed in betwixt files</li>
            <li><strong>Improved introspection support for DynaBeans</strong></li>
            <li><strong>Improved introspection for interfaces</strong> superinterface 
            properties now checked.</li>
            <li><strong>Attribute suppression</strong> - Betwixt now allows the 
            expression of certain values to be suppressed through a custom strategy.</li>  
            <li><strong>Custom Dot Betwixt Documents</strong> - custom dot betwixt
            documents can be passed in directly.</li>
            <li><strong>Multi mapping</strong> documents allowing several mappings to be
            specified within a single document.</li>
            <li><strong>Improved support for derived beans</strong> bind time type
            population now supported and enabled by default</li>
            <li>All exceptions are now complex</li>
            <li><strong>PropertySuppressionStrategy</strong> added which allows 
            course grained control of those properties which should be ignored by Betwixt.</li>
            <li>Improved support for <strong>java.util collections API implementations</strong>.
            Betwixt now recognizes additional properties on custom collection implementations.</li>
        </ul>
    </subsection>
    <subsection name='0.6'>
        <ul>
            <li><strong>Improved empty element rendering</strong></li>
            <li>
<strong>Extended betwixt file</strong> by adding two new properties 
to &lt;addDefaults&gt; that allow matching properties or adders to be
supressed.
            </li>
            <li>
<strong>SimpleTypeMapper strategy</strong> for finely grained control over simple type (primitive) 
binding.
            </li>
            <li>
<strong>Improved support for reading arrays.</strong> In particular added code to support
reading of array valued property setters and for array valued adders.
            </li>
        </ul>
    </subsection>
    <subsection name='0.5'>
        <ul>
            <li>
                <strong>Added support for CDATA encoding</strong> through strategy
                for mixed content encoding.
            </li>
            <li>
                <strong>Created DTD for .betwixt files.</strong>
            </li>
            <li>
                <strong>Added validity check for element and attribute names in .betwixt files</strong>
                .betwixt files contain names for xml elements and attributes. Only certain names
                for elements and attributes are allowed by the xml specification. Betwixt now
                check to ensure that the names are appropraite and terminates processing with an 
                Exception if they are not.
            </li>
            <li>
                <strong>Created XMLUtils</strong>
                Separated out basic xml utilty methods into a static utility class called XMLUtils.
                This should allow them to be reused in isolation.
            </li>
            <li>
                <strong>Improved digester integration</strong>
                Improved integration with digester. <code>BeanRuleSet</code> is a digester ruleset
                which sets up all the rules required to digester a bean. When a bean is registered,
                a <code>BeanRuleSet</code> instance is used to set up the required rule on digester.
                Standard digester rules can be added before and after registration.
            </li>
            <li>
                <strong>Handle empty elements better.</strong> 
                An option not to write empty elements has been added. This is required to correctly write 
                some kinds of xml.
                The RSS full round tripping will only work with this functionality.
            </li>
            <li>
                <strong>Support Writing Mixed Content</strong> 
                Mixed content elements contain elements and body text. Added support for adding
                body text between child elements through the .betwixt file. This text can be
                static or set from a property.
            </li>
            <li>
                <strong>Allow customization for update from .betwixt file</strong>
                Add updater attribute that allows the updater to be specified for an elements.
            </li>
            <li>
                <strong>Added Reading for Composite Map Properties</strong>
                Added code that reads entries for composite map properties and adds then correctly.
                This code relies on the Betwixt map element mapping format.
            </li>
            <li>
                <strong>Added setter for bean writing encoding type</strong>
                Added an additional constructor which takes an encoding type which is used to set the 
                encoding type on the output stream. This allows xml with different encoding types to
                be written.
            </li>
            <li>
                <strong>Fixed bug when writing Array's</strong>
                When an array was pass to a write call, invalid XML used to be produced. This has been fixed.
            </li>
            <li>
            <strong>Basic Support For Reading Mixed Content</strong>
            This is the basic case where all of the content is read into a single property.
            </li>
            <li>
            <strong>Basic Support For Writing DynaBeans</strong>
            Basic support for writing DynaBeans has been added. This was implemented by using an additional 
            layer of abstraction in the introspector. 
            </li>
            <li>
            <strong>Support for converting output strings</strong>
            ConvertUtils is now called to convert output strings (as well as input ones).
            </li>
            <li>
            <strong>Refactored Object &lt;-&gt; String Conversion</strong>
            This process has been factored out into a separate pluggable Strategy class 
            (<code>ObjectStringConverter</code>). A pure <code>ConvertUtils</code> implementation
            has been created (<code>ConvertUtilsObjectStringConverter</code>). The default implementation
            (<code>DefaultsObjectStringConverter</code>) delegates most conversions to <code>ConvertUtils</code>
            but contains a special case that allows the default setting to round trip java.util.Date's 
            without breaking compatibility.
            </li>
                <li>
<strong>Refactored creation of Bean For Elements In Reading</strong>
Factored out the code that creates beans for elements (when reading) into separates classes uses the 
<em>Chain Of Responsibility</em> pattern. This allows users to hook into the creation process and 
add their own custom creation steps or replace the defaults with new functionality.
            </li>
            <li>
<strong>Improved Support For Interfaces (.betwixt files)</strong>
Added (optional) 'class' attribute to .betwixt files. The attribute value should be a fully qualfied java classname. 
When set, the named class will be used to instantiate beans mapped to this element.
            </li>
            <li>
<strong>Improved Support For Interfaces including Entity Beans (ClassNormalizer)</strong>
Added ClassNormalizer strategy. This allows the Class introspector to differ from that of the Object.
            </li>
            <li>
<strong>Added Support For Replacement Of Bad Characters</strong> to default mapping of element names.
            </li>
            <li>
<strong>Added Options mechanism</strong> for communication behaviour hints to optional
strategies.
            </li>
            <li>
<strong>CDATA encoding support</strong> add support for flexible coding of body text as CDATA
sections (in addition to character escaping).
            </li>
        </ul>
    </subsection>
</section>
<section name='Deprecated'>
    <subsection name='Since 0.8'>
        <ul>
        </ul>
    </subsection>
	<subsection name='0.8'>
		<ul>
			<li>IdStoringStrategy
				<ul>
					<li>IdStoringStrategy.DEFAULT should never have been a constant
					since the implementation uses instance variables.
					Using this constant will result in a memory leak.
					Note: use proper factory methods 
					rather than public constant fields in the future!
					</li>
				</ul>
			</li>
			<li>ElementRule added forceAccessible attribute
				<ul>
					<li>configureDescriptor replaced by private method with extra parameter</li>
				</ul>
			</li>
		</ul>
	</subsection>
	<subsection name='0.7'>
		<ul>
			<li>ObjectStringConverter direct flavour replaced with use of options
				<ul>
					<li>objectToString replaced by method without flavour in signature</li>
					<li>stringToObject replaced by method without flavour in signature</li>
				</ul>
			</li>
		</ul>
	</subsection>
    <subsection name='0.6'>
        <ul>
                <li><strong>Refactoring (more declarative descriptors)</strong>
            	<ul>
            		<li><strong>ElementDescriptor</strong>
            			<ul>
            				<li><code>WrapCollectionsInElement</code> property removed</li>
            				<li><code>PrimitiveType</code> property removed</li>            				
            			</ul>
            		</li>
            		<li><strong>XMLIntrospectorHelper</strong> this will be deprecated.</li>
            	</ul>
            </li>
            <li><strong>Refactored introspection configuration into separate class</strong>
            	<ul>
            		<li><strong>XMLIntrospector</strong>
            			<ul>
            				<li>useBeanInfoSearchPath property</li>
            				<li>AttributeNameMapper property</li>
            				<li>ElementNameMapper property</li>
            				<li>PluralStemmer property</li>
            				<li>WrapCollectionsInElement property</li>
            				<li>AttributesForPrimitives property</li>
            				<li>ClassNormalizer property</li>
        				</ul>
        			</li>
            	</ul>
            </li>
        </ul>
    </subsection>
    <subsection name='0.5'>
        <ul>
            <li><strong>Adding context parameter to SAX style API</strong>
                <ul>
                    
                </ul>
            </li>
            <li> 
                <code>BeanWriter.escapeAttributeValue()</code> moved into XMLUtils
            </li>
            <li> 
                <code>BeanWriter.escapeBodyValue()</code> moved into XMLUtils
            </li>
            <li> 
                <code>BeanCreateRule</code> has been replaced by BeanRuleSet
            </li>
            <li> 
                <code>Expression.update</code> has been replaced by Updater
            </li>
            <li><strong>Refactoring (new SAX inspired API)</strong>
                <ul>
                    <li><strong>AbstractBeanWriter</strong>
                        <ul>
                            <li><code>write</code> removed</li>
                            <li><code>writeIDREFElement</code> removed</li>       
                            <li><code>writeAttributes</code> removed</li>    
                            <li><code>writeAttribute</code> removed</li>    
                            <li><code>writeRestOfElement</code> removed</li>    
                            <li><code>getIndentLevel</code> moved into BeanWriter</li>   
                            <li><code>expressElementStart</code> removed</li>   
                            <li><code>expressTagClose</code> removed</li>   
                            <li><code>expressElementEnd</code> removed</li>
                            <li><code>expressBodyText</code> removed</li>
                            <li><code>expressAttribute</code> removed</li>
                            <li><code>writeRestOfElement</code> removed</li>
                            <li><code>writeContent</code> removed</li>
                            <li><code>writePrintln</code> removed</li>
                            <li><code>writeIndent</code> removed</li>
                        </ul>
                    </li>
                    <li><strong>BeanWriter</strong>
                        <ul>
                            <li><code>writePrintln</code> removed</li>
                            <li><code>writeIndent</code> removed</li>
                            <li><code>expressElementStart</code> removed</li>   
                            <li><code>expressTagClose</code> removed</li>   
                            <li><code>expressElementEnd</code> removed</li>
                            <li><code>expressBodyText</code> removed</li>
                            <li><code>expressAttribute</code> removed</li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li><strong>Adding support for reading mixed content</strong>
                <ul>	
                    <li><strong>XMLIntrospectorHelper</strong>
                        <ul>
                            <li><code>createDescriptor</code> refactored into XMLIntrospector</li>
                        </ul>
                    </li>
                    <li><strong>XMLIntrospector</strong>
                        <ul>
                            <li><code>addProperty</code> replaced by overloaded method</li>
                            <li><code>addProperties</code> replaced by overloaded method</li>
                        </ul>
                    </li>
                </ul>
            </li>
        </ul>
    </subsection>
</section>
<section name='Backwards Incompatible Changes'>
    <subsection name='Since 0.8'>
        <ul>
        </ul>
    </subsection>
    <subsection name='0.8'>
        <ul>
        </ul>
    </subsection>
    <subsection name='0.7'>
        <ul>
        </ul>
    </subsection>
    <subsection name='0.6'>
        <ul>
        </ul>
    </subsection>
</section>
<section name='Semantic Changes'>
    <subsection name='Since 0.8'>
        <ul>
        </ul>
    </subsection>
    <subsection name='0.8'>
        <ul>
        </ul>
    </subsection>
    <subsection name='0.7'>
        <ul>
            <li>
Betwixt now (by default) suppresses the expression of all empty attributes.
The old behaviour can be restored by setting the <code>ValueSuppressionStrategy</code>
of the <code>BindingConfiguration</code> used by the writer to 
<code>ValueSuppressionStrategy.ALLOW_ALL_VALUES</code>.
            </li>
            <li>
Betwixt now defaults to bind time type mapping. Now read beans will (by default)
be populated by their bind time type (as opposed to their introspection time type).
Most users should notice no negative effects from this change. The previous behaviour
can be enabled by setting an introspection configuration property.
            </li>
            <li>
All exceptions are now complex types. This is now more consistent but the default
binding for exceptions in java.lang package have been changed from simple to complex.
            </li>
            <li>
Properties on collection implementations are now recognized (rather than ignored)
by Betwixt. Please use an appropriate <code>ClassNormalizer</code> for implementations
that need to hide their extra properties.
            </li>
        </ul>
    </subsection>
    <subsection name='0.6'>
        <ul>
            <li>
            	<strong>Introspection and ElementDescriptor</strong> changes in introspection and 
            	ElementDescriptor to make them more declarative so that the logic required to
            	read and write beans can be reduced. An explicit flag has been added to indicate
            	which ElementDescriptors are hollow. The descriptors describing collective mappings
            	(one-to-many). wrapCollectionInElement has been removed with the wrapping element
            	descriptor becoming just a spacer (an xml element which is not mapped to a part of
            	the object graph). The updater now needs to be placed on the hollow collective
            	element rather than then parent spacer.
            </li>
            <li>
            	<strong>ID assignment</strong> IDs are now not assigned to any element
            	which are simple (do not have any children and no attributes) rather than just primitives.
            	The concept of primitives is being phased out in favour of the more general
            	concept of atomic mappings (object &lt;-&gt; string) and elements of simple type.
            	ID generation is likely to be refactored soon so that it's performed within 
            	the structure of the attribute references rather than as part of the writing
            	algorithm.
            </li>
        </ul>
    </subsection>
    <subsection name='0.5'>
        <ul>	
            <li>
                <strong>SAXBeanWriter now sets localName</strong>
                SAXBeanWriter now sets localName as well as qName for each SAX call. The local name
                is derived from the qualified name. Users whose names contain colons but which do not 
                comply with the namespace dialect will need to set the NamespaceDialect property to 
                false.
            </li>
            <li>
                <strong>AbstractBeanWriter has been refactored</strong>
                AbstractBeanWriter has been extensively refactored.
                The public interface has been preserved but the protected API has been extensively modified.
                In order to preserve backwards compatibility, methods have been deprecated but are no
                longer called and so code that overrides then will break.
            </li>
            <li>
                <strong>Cleaner API for SAXBeanWriter</strong>
                The AbstractBeanWriter refactoring means that SAXBeanWriter now has a much cleaner
                internal API. If anyone out there has been doing funky stuff by extending SAXBeanWriter
                then i'm afraid that you'll need to rewrite.
            </li>
            <li>
                <strong>Refactored Introspection</strong>
                XMLIntrospector has been refactored to add an extra level of introspection indirection.
                The results of introspection are now given in a BeanProperty. This allows support for
                introspection alternatives to be added.
            </li>
            <li>
                <strong>DynaBean Implementations</strong>
                DynaBean's are now mapped using the properties found via the pseudo-introspection process
                defined in BeanUtils. If you don't wish for DynaBeans implementations to be introspected
                in this way then provide a <code>.betwixt</code> file to specify the mapping.
            </li>
            <li>
                <strong>String To Object Conversions Now Use <code>ConvertUtils</code></strong>
                <code>ConvertUtils</code> from commons-beanutils is now called to performt the object to 
                string conversions. It is possible that in some circumstances, this change may effect the
                output.
            </li>
            <li>
                <strong><code>ConvertUtils</code> conversion now ignored (by default) for java.util.Date</strong>
                If you use a custom <code>ConvertUtils</code> java.util.Date converter then see 
                <a href='guide/binding.html#Converting Dates (And Other Objects)'>the guide</a>.
            </li>
        </ul>
    </subsection>
</section>
	<section name='Dependencies'>
        <subsection name='Since 0.8'>
        	<ul>
	        </ul>
    	</subsection>
	    <subsection name='0.8'>
        	<ul>
	        </ul>
    	</subsection>
		<subsection name='0.7'>
            <p>
                <ul>
                    <li>
Upgraded <code>commons-beanutils</code> to <code>1.7.0</code>.
                </li>
                    <li>
Upgraded <code>commons-digester</code> to <code>1.6</code>.
                </li>
            </ul>
        </p>
    </subsection>
	<subsection name='0.5'>
            <p>
                <ul>
                    <li>
Upgraded <code>commons-beanutils</code> to <code>1.6.1</code>
                </li>
                    <li>
Upgraded <code>commons-digester</code> to <code>1.5</code>
                </li>
            </ul>
        </p>
    </subsection>
</section>
</body>
</document>

