<?xml version="1.0"?>

<document>

  <properties>
    <title>Betwixt FAQ</title>
    <author email="jstrachan@apache.org">James Strachan</author>
  </properties>

  <body>

  <section name="Frequently Asked Questions">
    <p>
      This document attempts to answer some of the more frequently asked
      questions regarding various aspects of Betwixt.  These questions are
      typically asked over and over again on the mailing lists, as a
      courtesy to the developers, we ask that you read this document
      before posting to the mailing lists.  
    </p>
    <p><strong>General</strong></p>
    <ol>
      <li>
        <a href="#what-is-betwixt">
          What is Betwixt?
        </a>
      </li>
      <li>
        <a href="#why-called-betwixt">
          Why is this called Betwixt?
        </a>
      </li>
      <li>
        <a href="#comparison">
          How does Betwixt compare to technologies like JAXB and Castor?
        </a>
      </li>
    </ol>
    <p><strong>Writing Beans</strong></p>
    <ol>
      <li>
        <a href="#output-options">
          In what forms can Betwixt output the xml?
        </a>
      </li>
      <li>
        <a href="#pretty-print">
          Can <code>BeanWriter</code> produce xml that's easy (for a human ;) to read?
        </a>
      </li>
      <li>
        <a href="#cycles">
          How does Betwixt cope with beans which have cyclic reference graphs?
        </a>
      </li>
      <li>
        <a href="#stop-generating-ids">
          How can I stop Betwixt generating <code>ID</code> attribute values for my beans?
        </a>
      </li>
      <li>
        <a href="#empty-elements">
          How can I stop Betwixt write out empty elements?
        </a>
      </li>
    </ol>
    <p><strong>Reading Beans</strong></p>
    <ol>
      <li>
        <a href="#digester-limitation">
          How can I make my extra digestion <em>Rule</em>s work with Betwixt?
        </a>
      </li>
    </ol>
    <p><strong>Building Betwixt</strong></p>
    <ol>
      <li>
        <a href="#how-to-build">
          How do I build Betwixt?
        </a>
      </li>
    </ol>

    <subsection name="General">
      <dl>
        <dt>
          <a name="what-is-betwixt">
            What is Betwixt?
          </a>
        </dt>
        <dd>
          The Betwixt library provides an XML introspection mechanism
   		  for mapping beans to XML in a flexible way.
          Please see the <a href="index.html">Home page</a> and <a
          href="overview.html">Overview</a> documents for more detail.
        </dd>
      </dl>
      
      <dl>
        <dt>
          <a name="why-called-betwixt">
          	Why is this called Betwixt?
          </a>
        </dt>
        <dd>
          I grepped a dictionary for words containing B*T*X for Bean To XML.
          There's not many words around containing those 3 letters in order. 
		  Betwixt also seems a fitting name as its the stuff between (betwixt) Beans and XML.
        </dd>
      </dl>
      
      <dl>
        <dt>
          <a name="comparison">
          	How does Betwixt compare to technologies like JAXB and Castor?
          </a>
        </dt>
        <dd>
			Where JAXP and Castor are strong is when you have a well agreed schema (XML
			Schema for Castor or a DTD in the case of JAXB, last time I looked) and want
			to auto-generate beans for parsing and processing the XML.
        </dd>
        <dd>
			Betwixt is strong is when you've already got the beans and just want a nice
			looking XML format to serialize/deserialize your beans. 
			Indeed with Betwixt you can just write your beans and not even worry
			about XML schemas and providing you follow a simple bean naming convention
			(the use of getter, setter and <i>adder</i> methods) you'll get nice looking XML for free.
        </dd>
        <dd>
			In JDK1.4 there is a 
			<a href="http://java.sun.com/j2se/1.4/docs/guide/beans/changes14.html">long term bean serialization</a> 
			mechanism which you can use. However Betwixt generates cleaner looking XML which can be customized
			to your own look and feel. Long term bean serialization doesn't generate nice looking XML.
        </dd>
      </dl>
    </subsection>
    <subsection name="Writing Beans">     
      <dl>
        <dt>
          <a name="output-options">
          	In what forms can Betwixt output the xml?
          </a>
        </dt>
        <dd>
            At the moment,  <code>BeanWriter</code> is the only way to output the xml.
            This writes the xml (as characters) to standard java io streams. 
            Work will begin on a SAX-based writer (which will generate SAX events)
            very soon.
        </dd>
      </dl>
      <dl>
        <dt>
          <a name="pretty-print">
          	Can <code>BeanWriter</code> produce xml that's easy (for a human ;) to read?
          </a>
        </dt>
        <dd>
            Yes! Call
<source>
beanWriter.enablePrettyPrint();
</source>
            (For those who are extra picky, how this is done can also be adjusted.
            See java docs for details.)
        </dd>
      </dl>      
      
      <dl>
        <dt>
          <a name="cycles">
          	How does Betwixt cope with beans which have cyclic reference graphs?
          </a>
        </dt>
        <dd>
            The default behaviour is to use the <code>ID</code>-<code>IDREF</code> mechanism
            (described in the xml specification). Betwixt will automatically assign <code>ID</code>
            values to beans as it write out the graph. If it comes to a bean that it's written
            before, it will write an <code>IDREF</code> value matching the original.
        </dd>
      </dl>  
      
      <dl>
        <dt>
          <a name="stop-generating-ids">
          	How can I stop Betwixt generating <code>ID</code> attribute values for my beans?
          </a>
        </dt>
        <dd>
            This is controlled by a property on <code>BeanWriter</code>. Call
<source>
beanWriter.setWriteIDs(false);
</source>
            and then Betwixt will no longer automatically add <code>ID</code> attributes.
            Once this property is set (to false), BeanWroter will throw a 
            <code>CyclicReferenceException</code> when any cyclic references which are 
            encountered in the bean graph.
        </dd>
      </dl>   

      <dl>
        <dt>
          <a name="empty-elements">
          	How can I stop Betwixt writing out empty elements?
          </a>
        </dt>
        <dd>
            An empty element (for this discussion) is one which has no attributes and no
            child elements which are not empty. 
            If you want to stop Betwixt writing out empty elements, then call:
<source>
beanWriter.setWriteEmptyElements(false);
</source>
            (before writing your bean).
        </dd>
      </dl>   
          
    </subsection>
    <subsection name="Reading Beans">
      <dl>
        <dt>
          <a name="digester-limitation">
            How can I make my extra digestion <em>Rule</em>s work with Betwixt?
          </a>
        </dt>
        <dd>
            Betwixt uses <a href='http://jakarta.apache.org/commons/digester.html'>Digester</a> for bean
            reading. The current implementation adds new <em>Rule</em>s at run time (which handle 
            the reading of child elements). This makes life difficult for any extra <em>Rule</em>s 
            added by the user before the digestion started.
        </dd>
        <dd>
            Extra <em>Rule</em>s added by the user will probably not work as expected. It may 
            be possible to find ways to make them work - but equally well, it may be impossible.
        </dd>
        <dd>
            <em>This is a known limitation.</em>
        </dd>
        <dd>
            Hopefully, this will be addressed in a later release.
            Until then, you are recommended to use the mapping mechanisms in Betwixt instead.
        </dd>
      </dl>
    </subsection>
    <subsection name="Building Betwixt">
      <dl>
        <dt>
          <a name="how-to-build">
            How do I build Betwixt?
          </a>
        </dt>
        <dd>
          Betwixt uses Maven for its build system. So you should be able to build Betwixt just like
          any other Maven enabled project. Please see the 
          <a href="http://jakarta.apache.org/turbine/maven/start/index.html">Maven</a> 
          documentation for details.
        </dd>
      </dl>
    </subsection>
  </section>
</body>
</document>
