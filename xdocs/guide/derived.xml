<?xml version="1.0"?>
<!--
   Copyright 2001-2004 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<document>

 <properties>
  <title>Derived Beans</title>
  <author email="rdonkin at apache dot org">Robert Burrell Donkin</author>
 </properties>

<body>
<section name='Derived Beans'>
        <subsection name='What Is A Derived Bean?'>
            <p>
A derived bean is one whose runtime class differs from the mapped property type
(as determined during introspection).
                </p>
    </subsection>   
</section>
    <section name='Specifying The Bind Time Type'>
        <subsection name='Using An Attribute To Specify Class'>
            <p>
An easy way to specify the class to be loaded is for the class name to be 
specified by an xml attribute. By default, the <code>className</code> attribute
(if present) is assumed to contain the name of the class to be loaded. 
        </p>
            <p>
For example the following xml:
        </p>
<source><![CDATA[
    <Animals> 
        <animal className='org.apache.commons.betwixt.io.read.FerretBean'> 
            <call>Dook</call>
            <colour>albino</colour> 
            <latinName>Mustela putoris furo</latinName>
            <name>Lector</name> 
        </animal> 
        <animal className='org.apache.commons.betwixt.io.read.CatBean'> 
            <call>Meow</call>
            <colour>black</colour> 
            <latinName>Felis catus</latinName>
            <name>Sam</name> 
        </animal> 
        <animal className='org.apache.commons.betwixt.io.read.DogBean'> 
            <breed>mongrol</breed>
            <call>Woof</call>
            <latinName>Canis familiaris</latinName> 
            <name>Bobby</name>
            <pedigree>false</pedigree> 
        </animal> 
    </Animals>
]]>
</source>
            <p>
will construct objects of type <code>FerretBean</code>, <code>CatBean</code> and 
<code>DogBean</code>.
        </p>
            <p>
The attribute which contains the fully qualified class name can be configured through
the <code>classNameAttribute</code> property of the <code>BindingConfiguration</code>.
        </p>
            <p>
The classname mapping is implemented by a <code>ChainedBeanCreator</code>. If this
feature is not required, a custom bean creation chain should be used.
        </p>
    </subsection>
</section>
    <section name='Mapping Derived Beans'>
        <subsection name="Bind Time Type Verses Introspection Time Type">
            <p>
The introspection time type is the (expected) type as discovered during introspection.
The bind time type is the actual type of the object found as Betwixt runs. For example,
a property might have type <code>Animal</code> but when the getter of that property is 
called, the object returned might be a subclass (if <code>Animal</code> is a class) 
or an implementation (if <code>Animal</code> is an interface) - <code>Cat</code>, say.
In this case, <code>Animal</code> would be the introspection time type but <code>Cat</code>
the bind time type.
        </p>
            <p>
There are two approaches to deal with this situation: either the object can be mapped 
on the basis of it's bind time type (the actual class of the object) or on the basis
of it's introspection time type. In the first case, all the properties present will be 
mapped, in the second only a subset.
        </p>    
            <p>
For example, say that <code>Animal</code> has properties <code>latinName</code>
and <code>call</code> and that <code>Cat</code> is a subclass with an additional
<code>colour</code> property. Consider a bean with a property returning an <code>Animal</code>.
If the introspection time type is used, only the <code>latinName</code>
and <code>call</code> properties of a<code>Cat</code> bean will be read and written
whereas when bind time typing is used, all properties will be.
        </p>
            <p>
There are typical use cases which demonstate the need for each approach. Betwixt 
supports both in a flexible way, for both reading and writing but defaults to 
bind time typing (which is typically more intuitive).
        </p>
    </subsection>
        <subsection name='Configuring Mapping Derivation'>
            <p>
Whether the bind time type or the introspection time type should determine the mapping
is configurable in two different ways. The <code>MappingDerivationStrategy</code> 
implementation set on the introspection configuration allows powerful but course-grained
control over which types of property should have their mappings determine in which ways.
Per-element control is also available through the dot betwixt document. This is typically
used for more finely grained refinements. The dot betwixt settings override the strategy.
        </p>
            <p>
For example, the following code snippet configures an <code>XMLIntrospector</code> 
so that (unless overriden by a dot betwixt document setting), introspection time types
will determine the mapping:
        </p>
<source><![CDATA[
        XMLIntrospector xmlIntrospector = ...;
        xmlIntrospector.getConfiguration()
            .setMappingDerivationStrategy(
                MappingDerivationStrategy.USE_INTROSPECTION_TIME_TYPE);
}	
]]></source>
            <p>
The optional <code>mappingDerivation</code> attribute on an <code>&lt;element&gt;</code> element.
This attribute takes two enumerated values: <code>bind</code> and <code>introspection</code>.
As might be expected, <code>bind</code> indicates that the element should use 
the bind time type whereas <code>introspection</code> indicates that the introspection time
type should be used.
        </p>
            <p>
For example, when the following dot betwixt document is used, the <code>pet</code>
property's mapping will be dertermined by the introsection time type mapping.
        </p>
<source><![CDATA[
    <?xml version='1.0'?>
    <info>
        <element name='pet-record'>
            <element name='pet' property='pet' mappingDerivation='introspection'/>" +
        </element>
    </info>"
}	
]]></source>

            <p>
Note that the mapping derivations are added together with all of the other defaults
and so all elements without the <code>mappingDerivation</code> attribute will
default to bind time typing unless and <code>addDefaults</code> is present.
        </p>
    </subsection>
</section>
</body>
</document>
